===========================================================================================================================================

Generic host: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.1
A host is an object that encapsulates an app's resources, such as:
* Dependency injection (DI)
* Logging
* Configuration
* IHostedService implementations
When a host starts, it calls IHostedService.StartAsync on each implementation of IHostedService that it finds in the DI container. 

Host.CreateDefaultBuilder().ConfigureServices(service=>services.AddHostedService<ServiceClass>()).Build().Run()

If the app uses Entity Framework Core, don't change the name or signature of the CreateHostBuilder method. 
The Entity Framework Core tools expect to find a CreateHostBuilder method that configures the host without running the app. 

===========================================================================================================================================

Web Host: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/web-host?view=aspnetcore-3.1
In a web app, one of the IHostedService implementations is a web service that starts an HTTP server implementation.
In versions of ASP.NET Core earlier than 3.0, the Web Host is used for HTTP workloads. The Web Host is no longer recommended for web apps and remains available only for backward compatibility.

===========================================================================================================================================

Dependency injections: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1
IOC/Dependency Inversion Principle: https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles#dependency-inversion

Register a generic open type:
services.AddSingleton(typeof(ILogger<>), typeof(Logger<>));

When a service collection extension method is available to register a service (and its dependent services, if required), 
the convention is to use a single Add{SERVICE_NAME} extension method to register all of the services required by that service. 

Transient
Transient lifetime services (AddTransient) are created each time they're requested from the service container. This lifetime works best for lightweight, stateless services.

Scoped lifetime services (AddScoped) are created once per client request (connection).
 Warning When using a scoped service in a middleware, inject the service into the Invoke or InvokeAsync method. Don't inject via constructor injection because it forces the service to behave like a singleton.
 
Singleton
Singleton lifetime services (AddSingleton) are created the first time they're requested (or when Startup.ConfigureServices is run and an instance is specified with the service registration). Every subsequent request uses the same instance. If the app requires singleton behavior, allowing the service container to manage the service's lifetime is recommended. Don't implement the singleton design pattern and provide user code to manage the object's lifetime in the class.
 Warning It's dangerous to resolve a scoped service from a singleton. It may cause the service to have incorrect state when processing subsequent requests.


===========================================================================================================================================

HTTP request clients: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1

===========================================================================================================================================

Middleware: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-3.1
Prefix Add is used to register all types needed. Place extension methods in the Microsoft.Extensions.DependencyInjection namespace to encapsulate groups of service registrations.
Prefix Use is used to implement things in the Middleware chain

===========================================================================================================================================

IOptions, IOptionsSnapshot, IOptionsMonitor
IOptions is Singleton
IOptionsSnapshot is Scoped and supports named options, detects changes in IConfiguration
IOptionsMonitor supports callback on change
